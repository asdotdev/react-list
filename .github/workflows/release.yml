name: Release
on:
  push:
    branches:
      - master

jobs:
  release:
    runs-on: ubuntu-latest

    outputs:
      skipped: ${{ steps.changelog.outputs.SKIPPED }}

    steps:
      # check out the repository with all releases
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Create a temporary, uniquely named branch to push release info to
      - name: create temporary branch
        run: git branch "changelog-release-${{ github.sha }}" "${{ github.sha }}"

      # switch to the temporary branch
      - name: switch to new branch
        run: git checkout changelog-release-${{ github.sha }}

      # update app config with version
      - name: get npm version
        id: package-version
        run: |
          LF_VERSION=$(cat package.json | jq -r '.version')
          echo "current-version=$LF_VERSION" >> "$GITHUB_OUTPUT"
      - name: update app config
        run: sed -i 's/0.0.0/${{ steps.package-version.outputs.current-version}}/g' config/app.json

      # create release info and push it upstream
      - name: conventional changelog action
        id: changelog
        uses: TriPSs/conventional-changelog-action@v5
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          version-file: "./package.json,./package-lock.json,./config/app.json"
          git-branch: "changelog-release-${{ github.sha }}"
          skip-git-pull: true

      # create PR with release info
      - name: create PR with release info
        if: steps.changelog.outputs.skipped == 'false'
        id: create-pr
        run: gh pr create --base master --head changelog-release-${{ github.sha }} --title 'Merge new release into master' --body 'Created by Github action'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # merge PR using GitHub CLI
      - name: merge PR with release info
        if: steps.changelog.outputs.skipped == 'false'
        id: merge-pr
        run: gh pr merge --admin --merge --subject '${{ vars.RELEASE_SUBJECT }}' --delete-branch
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # release info is now in master so we can continue as before
      - name: create release with last commit
        if: steps.changelog.outputs.skipped == 'false'
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ steps.changelog.outputs.tag }}
          name: ${{ steps.changelog.outputs.tag }}
          body: ${{ steps.changelog.outputs.clean_changelog }}

      # setting release outputs
      - name: setting release outputs
        id: set-outputs
        run: echo "SKIPPED=${{steps.changelog.outputs.skipped}}" >> "$GITHUB_OUTPUT"
